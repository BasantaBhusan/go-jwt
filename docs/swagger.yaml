definitions:
  controllers.CreateKYCAddressRequest:
    properties:
      district:
        type: string
      municipality:
        type: string
      province:
        type: string
      ward_number:
        type: string
    required:
    - district
    - province
    - ward_number
    type: object
  controllers.CreateKYCRequest:
    properties:
      address:
        $ref: '#/definitions/controllers.CreateKYCAddressRequest'
      firm_registered:
        type: boolean
      full_name:
        type: string
      is_kyc:
        type: boolean
      mobile_number:
        type: string
      service:
        $ref: '#/definitions/controllers.CreateKYCServiceRequest'
      working_area:
        $ref: '#/definitions/controllers.CreateKYCWorkingAreaRequest'
    required:
    - address
    - full_name
    - mobile_number
    - service
    - working_area
    type: object
  controllers.CreateKYCServiceRequest:
    properties:
      service_name:
        type: string
    required:
    - service_name
    type: object
  controllers.CreateKYCWorkingAreaRequest:
    properties:
      activities:
        items:
          type: string
        type: array
      area_name:
        type: string
    required:
    - activities
    - area_name
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  controllers.UserRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: integer
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Activity:
    properties:
      activityName:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      kycID:
        type: integer
      updatedAt:
        type: string
      workingAreaID:
        type: integer
    type: object
  models.Address:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      district:
        type: string
      id:
        type: integer
      kycID:
        type: integer
      municipality:
        type: string
      province:
        type: string
      updatedAt:
        type: string
      userID:
        type: integer
      wardNumber:
        type: string
    type: object
  models.InvestmentOption:
    enum:
    - up to 5 Lakhs
    - up to 10 Lakhs
    - up to 25 Lakhs
    - up to 50 Lakhs
    - up to 1 Crore
    - above 1 Crore
    type: string
    x-enum-varnames:
    - UpTo5LAKHS
    - UpTo10LAKHS
    - UpTo25LAKHS
    - UpTo50LAKHS
    - UpTo1CRORE
    - Above1CRORE
  models.Kyc:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      firmRegistered:
        type: boolean
      fullName:
        type: string
      id:
        type: integer
      mobileNumber:
        type: string
      service:
        $ref: '#/definitions/models.Service'
      updatedAt:
        type: string
      userID:
        type: integer
      workingArea:
        $ref: '#/definitions/models.WorkingArea'
    type: object
  models.Service:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      investment:
        $ref: '#/definitions/models.InvestmentOption'
      kycID:
        type: integer
      serviceName:
        $ref: '#/definitions/models.ServiceType'
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
  models.ServiceType:
    enum:
    - Expert Advice
    - Business Partnership
    - Bank Loan Facilitation
    - Training and Coaching
    - Cold Store Construction
    - Assistance in Marketing
    - Investment
    type: string
    x-enum-varnames:
    - ExpertAdvice
    - BusinessPartnership
    - BankLoanFacilitation
    - TrainingAndCoaching
    - ColdStoreConstruction
    - AssistanceInMarketing
    - InvestmentService
  models.WorkingArea:
    properties:
      activities:
        items:
          $ref: '#/definitions/models.Activity'
        type: array
      areaName:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      kycID:
        type: integer
      updatedAt:
        type: string
      userID:
        type: integer
    type: object
info:
  contact: {}
paths:
  /logout:
    get:
      consumes:
      - application/json
      description: Clear Cookie.
      produces:
      - application/json
      responses:
        "200":
          description: Sucessfully logged out.
      summary: Logout user
      tags:
      - Users
  /user/all:
    get:
      consumes:
      - application/json
      description: Retrieve all users.
      produces:
      - application/json
      responses:
        "200":
          description: List of users
          schema:
            items:
              $ref: '#/definitions/controllers.UserResponse'
            type: array
      summary: Get all users
      tags:
      - Users
  /user/kyc/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve KYC (Know Your Customer) record by User ID.
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: KYC information
          schema:
            $ref: '#/definitions/models.Kyc'
        "400":
          description: Invalid user ID
        "404":
          description: KYC not found for the given user ID
      summary: Get KYC by User ID
      tags:
      - KYC
  /user/kyc/create:
    post:
      consumes:
      - application/json
      description: Create KYC (Know Your Customer) record.
      parameters:
      - description: KYC details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateKYCRequest'
      produces:
      - application/json
      responses:
        "200":
          description: KYC created successfully
        "400":
          description: Failed to read body or create KYC
      summary: Create KYC
      tags:
      - KYC
  /user/login:
    post:
      consumes:
      - application/json
      description: Log in a user.
      parameters:
      - description: User credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created Successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
      summary: User login
      tags:
      - Users
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user.
      parameters:
      - description: User information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User created Successfully
          schema:
            $ref: '#/definitions/controllers.SuccessResponse'
      summary: Create new user
      tags:
      - Users
  /user/validate:
    get:
      consumes:
      - application/json
      description: Validate User.
      produces:
      - application/json
      responses:
        "200":
          description: Ok
        "401":
          description: Unauthorized
      summary: Validate user
      tags:
      - Users
swagger: "2.0"
